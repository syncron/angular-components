@use 'sass:map';
@use 'sass:meta';
@use '../all-theme';
@use '../palette';
@use '../theming';

// Recursively replaces all of the values inside a Sass map with a different value.
@function replace-all-values($palette, $replacement) {
  $output: ();

  @each $key, $value in $palette {
    @if (meta.type-of($value) == 'map') {
      $output: map.merge(($key: replace-all-values($value, $replacement)), $output);
    }
    @else {
      $output: map.merge(($key: $replacement), $output);
    }
  }

  @return $output;
}

// Theme used to test that our themes would compile if the colors were specified as CSS variables.
._demo-css-variables-theme {
  $palette: theming.define-palette(palette.$blue-grey-palette);
  $theme: theming.define-dark-theme((
    color: (
      primary: $palette,
      accent: $palette,
      warn: $palette
    )
  ));
  @include all-theme.all-component-themes(replace-all-values($theme, var(--test-var)));
}

@function -test-theme-lookup($hue, $opacity, $type: 'color') {
  @if ($type == 'alpha') {
    @return 'var(--test-#{$hue}-alpha)';
  }
  @return 'rgba(var(--test-#{$hue}-rgb), #{if($opacity == null, 'var(--test-#{$hue}-alpha)', $opacity)})'
}

._demo-css-functions-theme {
  $palette: theming.define-palette(palette.$blue-grey-palette);
  $theme: theming.define-dark-theme((
    color: (
      primary: meta.get-function('-test-theme-lookup'),
      accent: meta.get-function('-test-theme-lookup'),
      warn: meta.get-function('-test-theme-lookup')
    )
  ));
  @include all-theme.all-component-themes($theme);
}
